# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(A):
    # Implement your solution here
    # any slice is made of smaller subslices
    # odd slices will be a combination of 2 & 3 size slices
    # even slices will be a combination of 2 size slices
    # as such we only need to look at a starting point, find the 2 slice average, and the 3 slice average
    # store the smaller value at that index
    # and move on
    # finally iterate through the array, and the first index that has the minimal value is the answer

    B =[0] * len(A)
    prefixList=[0]*(len(A)+1)
    for index,num in enumerate(A):
        prefixList[index+1]=(prefixList[index]+num)
    for index,num in enumerate(prefixList):
        # use plus 2 because referenced list has not been sliced
        # will need to put safety rails for the last index
        if index == 0:
            continue
        if index == len(prefixList)-1:
            #Last element, cannot be used in a slice
            B[index-1]=None
            continue
        if index == len(prefixList)-2:
            TwoSlice=((prefixList[index+1]-prefixList[index-1])/2)
            B[index-1]=TwoSlice
            continue    
        TwoSlice=((prefixList[index+1]-prefixList[index-1])/2)
        ThreeSlice=((prefixList[index+2]-prefixList[index-1])/3)
        if TwoSlice<=ThreeSlice:
            minAvg=TwoSlice
        else:
            minAvg=ThreeSlice
        B[index-1]=minAvg
    #we now should have an array of the minimum average possible value from each starting position in 
    # the B array
    # now iterate through the B array and find the location of the first minimum
    minimum=B[0]
    lowestIndex=0
    for index,num in enumerate(B):
        if num == None:
            continue
        if num<minimum:
            minimum=num
            lowestIndex=index
    return lowestIndex
    pass
