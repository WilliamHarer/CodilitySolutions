# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(A):
    # Implement your solution here
    # seems easiest to approach from right to left on this one
    # use the max slice algo?
    # set starting maxVals to 0 (if profit isn't possible that's what we return)
    # we don't want sum we want profit
    # rather than max_ending+a maybe we want A-max_ending?
    # do we buy or sell, how is that represented?
    # buy represents a setting of the min 
    # sell represents a max of current - previous min
    # algorithm:
    # set max_ending/max_slice to 0, in the case of no profit solution this will remain the max
    # and can be safely returned as question requests
    # set our buy to the first element, buy represents whether we have reached a local minimum
    # if we reach a local min, we 'buy' at that price
    # we then compare the max possible profit at that point by comparing the previous max, starting at 0
    # to the possibility of selling the stock (current val- the local minima buy in price)
    # we compare this local maximum to the overall maximum by comparing previous total max(max_slice)
    # to max_ending, which ensures max_slice is always the maximum possible profit
    if A == []:
        return 0
    # N can equal 0
    max_ending = 0
    max_slice=0
    buy=A[0]
    for a in A:
        buy=min(buy,a)
        max_ending=max(max_ending,a-buy)
        max_slice=max(max_slice,max_ending)
    return max_slice
    pass
