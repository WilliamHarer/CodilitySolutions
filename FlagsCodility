# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

#This did not pass the performance req(for():for() so obviously it wouldnt)
# could not organically figure out the optimal solution within timelimit and needed to study it externally
def solution(A):
    # Implement your solution here
    # the value of peaks do not matter
    # one find out if a value is a peak or not and record the indice of each peak
    # remove edgecase to prevent out of index errors
    peaks=[]
    if len(A)==1:
        return 0
    for i,num in enumerate(A):
        if i==0:
            if A[i+1]<A[i]:
                continue
        if i==(len(A)-1):
                continue
        if A[i-1]<A[i] and A[i+1]<A[i]:
            # current val is a peak
            peaks.append(i)
    # we now have an array of all peak locations, which can be used to find distance from
    # left and right peak
    # can we just brute force?
    max_flags=0
    for x in range(1,len(peaks)+1):
        flags=x
        nextPeak=peaks[0]
        count=0
        for i,num in enumerate(peaks):
            if flags==0:
                break
            #place flag:
            if num>=nextPeak:
                flags-=1
                count+=1
                nextPeak=num+x
        max_flags=max(max_flags,count)
    return(max_flags)
    pass
